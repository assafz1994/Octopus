//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from OctopusQL.g4 by ANTLR 4.9

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9")]
[System.CLSCompliant(false)]
public partial class OctopusQLParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, EQUALS=12, COMPARATOR=13, SELECT=14, FROM=15, WHERE=16, 
		INCLUDE=17, ENTITY=18, INSERT=19, DELETE=20, UPDATE=21, ASSIGN=22, PIPELINE=23, 
		COLON=24, ISEQUALS=25, GT=26, GTE=27, LT=28, LTE=29, ADD=30, REMOVE=31, 
		WORD=32, NUMBER=33, ENT=34, ENTREP=35, TEXT=36, WHITESPACE=37;
	public const int
		RULE_r = 0, RULE_select = 1, RULE_insert = 2, RULE_delete = 3, RULE_update = 4, 
		RULE_insertClause = 5, RULE_getClause = 6, RULE_assignments = 7, RULE_assignment = 8, 
		RULE_whereClause = 9, RULE_fieldsWithDot = 10, RULE_fields = 11, RULE_entityReps = 12, 
		RULE_selectClause = 13, RULE_include = 14, RULE_aggregateClause = 15, 
		RULE_values = 16, RULE_array = 17, RULE_func = 18, RULE_field = 19, RULE_value = 20, 
		RULE_entity = 21, RULE_entityRep = 22, RULE_all = 23;
	public static readonly string[] ruleNames = {
		"r", "select", "insert", "delete", "update", "insertClause", "getClause", 
		"assignments", "assignment", "whereClause", "fieldsWithDot", "fields", 
		"entityReps", "selectClause", "include", "aggregateClause", "values", 
		"array", "func", "field", "value", "entity", "entityRep", "all"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "','", "'.'", "'['", "']'", "'AVG'", "'SUM'", "'MIN'", 
		"'MAX'", "'*'", "'='", null, null, null, null, null, null, null, null, 
		null, null, "'|'", "':'", "'=='", "'>'", "'>='", "'<'", "'<='", "'+='", 
		"'-='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"EQUALS", "COMPARATOR", "SELECT", "FROM", "WHERE", "INCLUDE", "ENTITY", 
		"INSERT", "DELETE", "UPDATE", "ASSIGN", "PIPELINE", "COLON", "ISEQUALS", 
		"GT", "GTE", "LT", "LTE", "ADD", "REMOVE", "WORD", "NUMBER", "ENT", "ENTREP", 
		"TEXT", "WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "OctopusQL.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static OctopusQLParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public OctopusQLParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public OctopusQLParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class RContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectContext select() {
			return GetRuleContext<SelectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertContext insert() {
			return GetRuleContext<InsertContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteContext delete() {
			return GetRuleContext<DeleteContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdateContext update() {
			return GetRuleContext<UpdateContext>(0);
		}
		public RContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_r; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.EnterR(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.ExitR(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOctopusQLVisitor<TResult> typedVisitor = visitor as IOctopusQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitR(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RContext r() {
		RContext _localctx = new RContext(Context, State);
		EnterRule(_localctx, 0, RULE_r);
		try {
			State = 52;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 48; select();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 49; insert();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 50; delete();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 51; update();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(OctopusQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EntityContext entity() {
			return GetRuleContext<EntityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EntityRepContext entityRep() {
			return GetRuleContext<EntityRepContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectClauseContext selectClause() {
			return GetRuleContext<SelectClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AggregateClauseContext aggregateClause() {
			return GetRuleContext<AggregateClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhereClauseContext[] whereClause() {
			return GetRuleContexts<WhereClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhereClauseContext whereClause(int i) {
			return GetRuleContext<WhereClauseContext>(i);
		}
		public SelectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.EnterSelect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.ExitSelect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOctopusQLVisitor<TResult> typedVisitor = visitor as IOctopusQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectContext select() {
		SelectContext _localctx = new SelectContext(Context, State);
		EnterRule(_localctx, 2, RULE_select);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 54; Match(FROM);
			State = 55; entity();
			State = 56; entityRep();
			State = 60;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 57; whereClause();
					}
					} 
				}
				State = 62;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			State = 65;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 63; selectClause();
				}
				break;
			case 2:
				{
				State = 64; aggregateClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(OctopusQLParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EntityRepsContext entityReps() {
			return GetRuleContext<EntityRepsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertClauseContext[] insertClause() {
			return GetRuleContexts<InsertClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertClauseContext insertClause(int i) {
			return GetRuleContext<InsertClauseContext>(i);
		}
		public InsertContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.EnterInsert(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.ExitInsert(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOctopusQLVisitor<TResult> typedVisitor = visitor as IOctopusQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsert(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsertContext insert() {
		InsertContext _localctx = new InsertContext(Context, State);
		EnterRule(_localctx, 4, RULE_insert);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 67; insertClause();
				}
				}
				State = 70;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ENTITY );
			State = 72; Match(INSERT);
			State = 73; entityReps();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(OctopusQLParser.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EntityRepsContext entityReps() {
			return GetRuleContext<EntityRepsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GetClauseContext[] getClause() {
			return GetRuleContexts<GetClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GetClauseContext getClause(int i) {
			return GetRuleContext<GetClauseContext>(i);
		}
		public DeleteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delete; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.EnterDelete(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.ExitDelete(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOctopusQLVisitor<TResult> typedVisitor = visitor as IOctopusQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelete(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteContext delete() {
		DeleteContext _localctx = new DeleteContext(Context, State);
		EnterRule(_localctx, 6, RULE_delete);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 75; getClause();
				}
				}
				State = 78;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ENTITY );
			State = 80; Match(DELETE);
			State = 81; entityReps();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(OctopusQLParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EntityRepContext entityRep() {
			return GetRuleContext<EntityRepContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(OctopusQLParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GetClauseContext[] getClause() {
			return GetRuleContexts<GetClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GetClauseContext getClause(int i) {
			return GetRuleContext<GetClauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldsWithDotContext fieldsWithDot() {
			return GetRuleContext<FieldsWithDotContext>(0);
		}
		public UpdateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_update; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.EnterUpdate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.ExitUpdate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOctopusQLVisitor<TResult> typedVisitor = visitor as IOctopusQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateContext update() {
		UpdateContext _localctx = new UpdateContext(Context, State);
		EnterRule(_localctx, 8, RULE_update);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 83; getClause();
				}
				}
				State = 86;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ENTITY );
			State = 88; Match(UPDATE);
			State = 89; entityRep();
			State = 91;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 90; fieldsWithDot();
				}
			}

			State = 93; Match(ASSIGN);
			State = 94; value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENTITY() { return GetToken(OctopusQLParser.ENTITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EntityContext entity() {
			return GetRuleContext<EntityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(OctopusQLParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EntityRepContext entityRep() {
			return GetRuleContext<EntityRepContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentsContext assignments() {
			return GetRuleContext<AssignmentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectContext select() {
			return GetRuleContext<SelectContext>(0);
		}
		public InsertClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.EnterInsertClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.ExitInsertClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOctopusQLVisitor<TResult> typedVisitor = visitor as IOctopusQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsertClauseContext insertClause() {
		InsertClauseContext _localctx = new InsertClauseContext(Context, State);
		EnterRule(_localctx, 10, RULE_insertClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96; Match(ENTITY);
			State = 97; entity();
			State = 98; Match(COLON);
			State = 99; entityRep();
			State = 100; Match(T__0);
			State = 103;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WORD:
				{
				State = 101; assignments();
				}
				break;
			case FROM:
				{
				State = 102; select();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 105; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GetClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENTITY() { return GetToken(OctopusQLParser.ENTITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EntityContext entity() {
			return GetRuleContext<EntityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(OctopusQLParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EntityRepContext entityRep() {
			return GetRuleContext<EntityRepContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectContext select() {
			return GetRuleContext<SelectContext>(0);
		}
		public GetClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.EnterGetClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.ExitGetClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOctopusQLVisitor<TResult> typedVisitor = visitor as IOctopusQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GetClauseContext getClause() {
		GetClauseContext _localctx = new GetClauseContext(Context, State);
		EnterRule(_localctx, 12, RULE_getClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107; Match(ENTITY);
			State = 108; entity();
			State = 109; Match(COLON);
			State = 110; entityRep();
			State = 111; Match(T__0);
			State = 112; select();
			State = 113; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentsContext : ParserRuleContext {
		public AssignmentContext _assignment;
		public IList<AssignmentContext> _assignmentList = new List<AssignmentContext>();
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		public AssignmentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.EnterAssignments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.ExitAssignments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOctopusQLVisitor<TResult> typedVisitor = visitor as IOctopusQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentsContext assignments() {
		AssignmentsContext _localctx = new AssignmentsContext(Context, State);
		EnterRule(_localctx, 14, RULE_assignments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115; _localctx._assignment = assignment();
			_localctx._assignmentList.Add(_localctx._assignment);
			State = 120;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2) {
				{
				{
				State = 116; Match(T__2);
				State = 117; _localctx._assignment = assignment();
				_localctx._assignmentList.Add(_localctx._assignment);
				}
				}
				State = 122;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(OctopusQLParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOctopusQLVisitor<TResult> typedVisitor = visitor as IOctopusQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 16, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123; field();
			State = 124; Match(EQUALS);
			State = 125; value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhereClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIPELINE() { return GetToken(OctopusQLParser.PIPELINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(OctopusQLParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EntityRepContext entityRep() {
			return GetRuleContext<EntityRepContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldsWithDotContext fieldsWithDot() {
			return GetRuleContext<FieldsWithDotContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPARATOR() { return GetToken(OctopusQLParser.COMPARATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public WhereClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whereClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.EnterWhereClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.ExitWhereClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOctopusQLVisitor<TResult> typedVisitor = visitor as IOctopusQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhereClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhereClauseContext whereClause() {
		WhereClauseContext _localctx = new WhereClauseContext(Context, State);
		EnterRule(_localctx, 18, RULE_whereClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127; Match(PIPELINE);
			State = 128; Match(WHERE);
			State = 129; entityRep();
			State = 130; fieldsWithDot();
			State = 131; Match(COMPARATOR);
			State = 132; value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldsWithDotContext : ParserRuleContext {
		public FieldContext _field;
		public IList<FieldContext> _el = new List<FieldContext>();
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext[] field() {
			return GetRuleContexts<FieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field(int i) {
			return GetRuleContext<FieldContext>(i);
		}
		public FieldsWithDotContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldsWithDot; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.EnterFieldsWithDot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.ExitFieldsWithDot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOctopusQLVisitor<TResult> typedVisitor = visitor as IOctopusQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldsWithDot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldsWithDotContext fieldsWithDot() {
		FieldsWithDotContext _localctx = new FieldsWithDotContext(Context, State);
		EnterRule(_localctx, 20, RULE_fieldsWithDot);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 134; Match(T__3);
				State = 135; _localctx._field = field();
				_localctx._el.Add(_localctx._field);
				}
				}
				State = 138;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__3 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldsContext : ParserRuleContext {
		public FieldContext _field;
		public IList<FieldContext> _fieldList = new List<FieldContext>();
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext[] field() {
			return GetRuleContexts<FieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field(int i) {
			return GetRuleContext<FieldContext>(i);
		}
		public FieldsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fields; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.EnterFields(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.ExitFields(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOctopusQLVisitor<TResult> typedVisitor = visitor as IOctopusQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFields(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldsContext fields() {
		FieldsContext _localctx = new FieldsContext(Context, State);
		EnterRule(_localctx, 22, RULE_fields);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140; _localctx._field = field();
			_localctx._fieldList.Add(_localctx._field);
			State = 145;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2) {
				{
				{
				State = 141; Match(T__2);
				State = 142; _localctx._field = field();
				_localctx._fieldList.Add(_localctx._field);
				}
				}
				State = 147;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityRepsContext : ParserRuleContext {
		public EntityRepContext _entityRep;
		public IList<EntityRepContext> _entityRepList = new List<EntityRepContext>();
		[System.Diagnostics.DebuggerNonUserCode] public EntityRepContext[] entityRep() {
			return GetRuleContexts<EntityRepContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EntityRepContext entityRep(int i) {
			return GetRuleContext<EntityRepContext>(i);
		}
		public EntityRepsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entityReps; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.EnterEntityReps(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.ExitEntityReps(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOctopusQLVisitor<TResult> typedVisitor = visitor as IOctopusQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntityReps(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntityRepsContext entityReps() {
		EntityRepsContext _localctx = new EntityRepsContext(Context, State);
		EnterRule(_localctx, 24, RULE_entityReps);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148; _localctx._entityRep = entityRep();
			_localctx._entityRepList.Add(_localctx._entityRep);
			State = 153;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2) {
				{
				{
				State = 149; Match(T__2);
				State = 150; _localctx._entityRep = entityRep();
				_localctx._entityRepList.Add(_localctx._entityRep);
				}
				}
				State = 155;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIPELINE() { return GetToken(OctopusQLParser.PIPELINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(OctopusQLParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EntityRepContext entityRep() {
			return GetRuleContext<EntityRepContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldsWithDotContext fieldsWithDot() {
			return GetRuleContext<FieldsWithDotContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldsContext fields() {
			return GetRuleContext<FieldsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AllContext all() {
			return GetRuleContext<AllContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IncludeContext[] include() {
			return GetRuleContexts<IncludeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IncludeContext include(int i) {
			return GetRuleContext<IncludeContext>(i);
		}
		public SelectClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.EnterSelectClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.ExitSelectClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOctopusQLVisitor<TResult> typedVisitor = visitor as IOctopusQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectClauseContext selectClause() {
		SelectClauseContext _localctx = new SelectClauseContext(Context, State);
		EnterRule(_localctx, 26, RULE_selectClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156; Match(PIPELINE);
			State = 157; Match(SELECT);
			State = 158; entityRep();
			State = 160;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 159; fieldsWithDot();
				}
			}

			State = 162; Match(T__0);
			State = 165;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WORD:
				{
				State = 163; fields();
				}
				break;
			case T__10:
				{
				State = 164; all();
				}
				break;
			case T__1:
				break;
			default:
				break;
			}
			State = 167; Match(T__1);
			State = 171;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==INCLUDE) {
				{
				{
				State = 168; include();
				}
				}
				State = 173;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncludeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCLUDE() { return GetToken(OctopusQLParser.INCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldsContext fields() {
			return GetRuleContext<FieldsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AllContext all() {
			return GetRuleContext<AllContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IncludeContext[] include() {
			return GetRuleContexts<IncludeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IncludeContext include(int i) {
			return GetRuleContext<IncludeContext>(i);
		}
		public IncludeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_include; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.EnterInclude(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.ExitInclude(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOctopusQLVisitor<TResult> typedVisitor = visitor as IOctopusQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInclude(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncludeContext include() {
		IncludeContext _localctx = new IncludeContext(Context, State);
		EnterRule(_localctx, 28, RULE_include);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174; Match(INCLUDE);
			State = 175; Match(T__0);
			State = 176; field();
			State = 177; Match(T__0);
			State = 180;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WORD:
				{
				State = 178; fields();
				}
				break;
			case T__10:
				{
				State = 179; all();
				}
				break;
			case T__1:
				break;
			default:
				break;
			}
			State = 182; Match(T__1);
			State = 186;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==INCLUDE) {
				{
				{
				State = 183; include();
				}
				}
				State = 188;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 189; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AggregateClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIPELINE() { return GetToken(OctopusQLParser.PIPELINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FuncContext func() {
			return GetRuleContext<FuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EntityRepContext entityRep() {
			return GetRuleContext<EntityRepContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		public AggregateClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggregateClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.EnterAggregateClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.ExitAggregateClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOctopusQLVisitor<TResult> typedVisitor = visitor as IOctopusQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAggregateClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AggregateClauseContext aggregateClause() {
		AggregateClauseContext _localctx = new AggregateClauseContext(Context, State);
		EnterRule(_localctx, 30, RULE_aggregateClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191; Match(PIPELINE);
			State = 192; func();
			State = 193; Match(T__0);
			State = 194; entityRep();
			State = 195; Match(T__0);
			State = 196; field();
			State = 197; Match(T__1);
			State = 198; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValuesContext : ParserRuleContext {
		public ValueContext _value;
		public IList<ValueContext> _valueList = new List<ValueContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		public ValuesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_values; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.EnterValues(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.ExitValues(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOctopusQLVisitor<TResult> typedVisitor = visitor as IOctopusQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValues(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValuesContext @values() {
		ValuesContext _localctx = new ValuesContext(Context, State);
		EnterRule(_localctx, 32, RULE_values);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200; _localctx._value = value();
			_localctx._valueList.Add(_localctx._value);
			State = 205;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2) {
				{
				{
				State = 201; Match(T__2);
				State = 202; _localctx._value = value();
				_localctx._valueList.Add(_localctx._value);
				}
				}
				State = 207;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValuesContext @values() {
			return GetRuleContext<ValuesContext>(0);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.EnterArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.ExitArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOctopusQLVisitor<TResult> typedVisitor = visitor as IOctopusQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 34, RULE_array);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208; Match(T__4);
			State = 210;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__4) | (1L << WORD) | (1L << NUMBER) | (1L << ENTREP) | (1L << TEXT))) != 0)) {
				{
				State = 209; @values();
				}
			}

			State = 212; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncContext : ParserRuleContext {
		public FuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.EnterFunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.ExitFunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOctopusQLVisitor<TResult> typedVisitor = visitor as IOctopusQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncContext func() {
		FuncContext _localctx = new FuncContext(Context, State);
		EnterRule(_localctx, 36, RULE_func);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD() { return GetToken(OctopusQLParser.WORD, 0); }
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.EnterField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.ExitField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOctopusQLVisitor<TResult> typedVisitor = visitor as IOctopusQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(Context, State);
		EnterRule(_localctx, 38, RULE_field);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216; Match(WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectContext select() {
			return GetRuleContext<SelectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD() { return GetToken(OctopusQLParser.WORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(OctopusQLParser.TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(OctopusQLParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENTREP() { return GetToken(OctopusQLParser.ENTREP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOctopusQLVisitor<TResult> typedVisitor = visitor as IOctopusQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 40, RULE_value);
		try {
			State = 227;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 218; Match(T__0);
				State = 219; select();
				State = 220; Match(T__1);
				}
				break;
			case WORD:
				EnterOuterAlt(_localctx, 2);
				{
				State = 222; Match(WORD);
				}
				break;
			case TEXT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 223; Match(TEXT);
				}
				break;
			case NUMBER:
				EnterOuterAlt(_localctx, 4);
				{
				State = 224; Match(NUMBER);
				}
				break;
			case ENTREP:
				EnterOuterAlt(_localctx, 5);
				{
				State = 225; Match(ENTREP);
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 6);
				{
				State = 226; array();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD() { return GetToken(OctopusQLParser.WORD, 0); }
		public EntityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.EnterEntity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.ExitEntity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOctopusQLVisitor<TResult> typedVisitor = visitor as IOctopusQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntityContext entity() {
		EntityContext _localctx = new EntityContext(Context, State);
		EnterRule(_localctx, 42, RULE_entity);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229; Match(WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityRepContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENTREP() { return GetToken(OctopusQLParser.ENTREP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD() { return GetToken(OctopusQLParser.WORD, 0); }
		public EntityRepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entityRep; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.EnterEntityRep(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.ExitEntityRep(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOctopusQLVisitor<TResult> typedVisitor = visitor as IOctopusQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntityRep(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntityRepContext entityRep() {
		EntityRepContext _localctx = new EntityRepContext(Context, State);
		EnterRule(_localctx, 44, RULE_entityRep);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231;
			_la = TokenStream.LA(1);
			if ( !(_la==WORD || _la==ENTREP) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AllContext : ParserRuleContext {
		public AllContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_all; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.EnterAll(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.ExitAll(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOctopusQLVisitor<TResult> typedVisitor = visitor as IOctopusQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAll(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AllContext all() {
		AllContext _localctx = new AllContext(Context, State);
		EnterRule(_localctx, 46, RULE_all);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 233; Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\'', '\xEE', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x5', '\x2', '\x37', '\n', '\x2', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', '=', '\n', '\x3', 
		'\f', '\x3', '\xE', '\x3', '@', '\v', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x5', '\x3', '\x44', '\n', '\x3', '\x3', '\x4', '\x6', '\x4', 'G', '\n', 
		'\x4', '\r', '\x4', '\xE', '\x4', 'H', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x5', '\x6', '\x5', 'O', '\n', '\x5', '\r', '\x5', '\xE', 
		'\x5', 'P', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x6', 
		'\x6', 'W', '\n', '\x6', '\r', '\x6', '\xE', '\x6', 'X', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '^', '\n', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 'j', '\n', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\a', '\t', 'y', '\n', '\t', '\f', '\t', '\xE', 
		'\t', '|', '\v', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x6', '\f', '\x8B', '\n', 
		'\f', '\r', '\f', '\xE', '\f', '\x8C', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\a', '\r', '\x92', '\n', '\r', '\f', '\r', '\xE', '\r', '\x95', 
		'\v', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\a', '\xE', '\x9A', 
		'\n', '\xE', '\f', '\xE', '\xE', '\xE', '\x9D', '\v', '\xE', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\xA3', '\n', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\xA8', 
		'\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\a', '\xF', '\xAC', '\n', '\xF', 
		'\f', '\xF', '\xE', '\xF', '\xAF', '\v', '\xF', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', 
		'\x10', '\xB7', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\a', '\x10', 
		'\xBB', '\n', '\x10', '\f', '\x10', '\xE', '\x10', '\xBE', '\v', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\a', '\x12', 
		'\xCE', '\n', '\x12', '\f', '\x12', '\xE', '\x12', '\xD1', '\v', '\x12', 
		'\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\xD5', '\n', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x5', 
		'\x16', '\xE6', '\n', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x2', '\x2', 
		'\x1A', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', 
		'*', ',', '.', '\x30', '\x2', '\x4', '\x3', '\x2', '\t', '\f', '\x4', 
		'\x2', '\"', '\"', '%', '%', '\x2', '\xF1', '\x2', '\x36', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '\x38', '\x3', '\x2', '\x2', '\x2', '\x6', '\x46', 
		'\x3', '\x2', '\x2', '\x2', '\b', 'N', '\x3', '\x2', '\x2', '\x2', '\n', 
		'V', '\x3', '\x2', '\x2', '\x2', '\f', '\x62', '\x3', '\x2', '\x2', '\x2', 
		'\xE', 'm', '\x3', '\x2', '\x2', '\x2', '\x10', 'u', '\x3', '\x2', '\x2', 
		'\x2', '\x12', '}', '\x3', '\x2', '\x2', '\x2', '\x14', '\x81', '\x3', 
		'\x2', '\x2', '\x2', '\x16', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x18', 
		'\x8E', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x96', '\x3', '\x2', '\x2', 
		'\x2', '\x1C', '\x9E', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xB0', '\x3', 
		'\x2', '\x2', '\x2', ' ', '\xC1', '\x3', '\x2', '\x2', '\x2', '\"', '\xCA', 
		'\x3', '\x2', '\x2', '\x2', '$', '\xD2', '\x3', '\x2', '\x2', '\x2', '&', 
		'\xD8', '\x3', '\x2', '\x2', '\x2', '(', '\xDA', '\x3', '\x2', '\x2', 
		'\x2', '*', '\xE5', '\x3', '\x2', '\x2', '\x2', ',', '\xE7', '\x3', '\x2', 
		'\x2', '\x2', '.', '\xE9', '\x3', '\x2', '\x2', '\x2', '\x30', '\xEB', 
		'\x3', '\x2', '\x2', '\x2', '\x32', '\x37', '\x5', '\x4', '\x3', '\x2', 
		'\x33', '\x37', '\x5', '\x6', '\x4', '\x2', '\x34', '\x37', '\x5', '\b', 
		'\x5', '\x2', '\x35', '\x37', '\x5', '\n', '\x6', '\x2', '\x36', '\x32', 
		'\x3', '\x2', '\x2', '\x2', '\x36', '\x33', '\x3', '\x2', '\x2', '\x2', 
		'\x36', '\x34', '\x3', '\x2', '\x2', '\x2', '\x36', '\x35', '\x3', '\x2', 
		'\x2', '\x2', '\x37', '\x3', '\x3', '\x2', '\x2', '\x2', '\x38', '\x39', 
		'\a', '\x11', '\x2', '\x2', '\x39', ':', '\x5', ',', '\x17', '\x2', ':', 
		'>', '\x5', '.', '\x18', '\x2', ';', '=', '\x5', '\x14', '\v', '\x2', 
		'<', ';', '\x3', '\x2', '\x2', '\x2', '=', '@', '\x3', '\x2', '\x2', '\x2', 
		'>', '<', '\x3', '\x2', '\x2', '\x2', '>', '?', '\x3', '\x2', '\x2', '\x2', 
		'?', '\x43', '\x3', '\x2', '\x2', '\x2', '@', '>', '\x3', '\x2', '\x2', 
		'\x2', '\x41', '\x44', '\x5', '\x1C', '\xF', '\x2', '\x42', '\x44', '\x5', 
		' ', '\x11', '\x2', '\x43', '\x41', '\x3', '\x2', '\x2', '\x2', '\x43', 
		'\x42', '\x3', '\x2', '\x2', '\x2', '\x44', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '\x45', 'G', '\x5', '\f', '\a', '\x2', '\x46', '\x45', '\x3', '\x2', 
		'\x2', '\x2', 'G', 'H', '\x3', '\x2', '\x2', '\x2', 'H', '\x46', '\x3', 
		'\x2', '\x2', '\x2', 'H', 'I', '\x3', '\x2', '\x2', '\x2', 'I', 'J', '\x3', 
		'\x2', '\x2', '\x2', 'J', 'K', '\a', '\x15', '\x2', '\x2', 'K', 'L', '\x5', 
		'\x1A', '\xE', '\x2', 'L', '\a', '\x3', '\x2', '\x2', '\x2', 'M', 'O', 
		'\x5', '\xE', '\b', '\x2', 'N', 'M', '\x3', '\x2', '\x2', '\x2', 'O', 
		'P', '\x3', '\x2', '\x2', '\x2', 'P', 'N', '\x3', '\x2', '\x2', '\x2', 
		'P', 'Q', '\x3', '\x2', '\x2', '\x2', 'Q', 'R', '\x3', '\x2', '\x2', '\x2', 
		'R', 'S', '\a', '\x16', '\x2', '\x2', 'S', 'T', '\x5', '\x1A', '\xE', 
		'\x2', 'T', '\t', '\x3', '\x2', '\x2', '\x2', 'U', 'W', '\x5', '\xE', 
		'\b', '\x2', 'V', 'U', '\x3', '\x2', '\x2', '\x2', 'W', 'X', '\x3', '\x2', 
		'\x2', '\x2', 'X', 'V', '\x3', '\x2', '\x2', '\x2', 'X', 'Y', '\x3', '\x2', 
		'\x2', '\x2', 'Y', 'Z', '\x3', '\x2', '\x2', '\x2', 'Z', '[', '\a', '\x17', 
		'\x2', '\x2', '[', ']', '\x5', '.', '\x18', '\x2', '\\', '^', '\x5', '\x16', 
		'\f', '\x2', ']', '\\', '\x3', '\x2', '\x2', '\x2', ']', '^', '\x3', '\x2', 
		'\x2', '\x2', '^', '_', '\x3', '\x2', '\x2', '\x2', '_', '`', '\a', '\x18', 
		'\x2', '\x2', '`', '\x61', '\x5', '*', '\x16', '\x2', '\x61', '\v', '\x3', 
		'\x2', '\x2', '\x2', '\x62', '\x63', '\a', '\x14', '\x2', '\x2', '\x63', 
		'\x64', '\x5', ',', '\x17', '\x2', '\x64', '\x65', '\a', '\x1A', '\x2', 
		'\x2', '\x65', '\x66', '\x5', '.', '\x18', '\x2', '\x66', 'i', '\a', '\x3', 
		'\x2', '\x2', 'g', 'j', '\x5', '\x10', '\t', '\x2', 'h', 'j', '\x5', '\x4', 
		'\x3', '\x2', 'i', 'g', '\x3', '\x2', '\x2', '\x2', 'i', 'h', '\x3', '\x2', 
		'\x2', '\x2', 'j', 'k', '\x3', '\x2', '\x2', '\x2', 'k', 'l', '\a', '\x4', 
		'\x2', '\x2', 'l', '\r', '\x3', '\x2', '\x2', '\x2', 'm', 'n', '\a', '\x14', 
		'\x2', '\x2', 'n', 'o', '\x5', ',', '\x17', '\x2', 'o', 'p', '\a', '\x1A', 
		'\x2', '\x2', 'p', 'q', '\x5', '.', '\x18', '\x2', 'q', 'r', '\a', '\x3', 
		'\x2', '\x2', 'r', 's', '\x5', '\x4', '\x3', '\x2', 's', 't', '\a', '\x4', 
		'\x2', '\x2', 't', '\xF', '\x3', '\x2', '\x2', '\x2', 'u', 'z', '\x5', 
		'\x12', '\n', '\x2', 'v', 'w', '\a', '\x5', '\x2', '\x2', 'w', 'y', '\x5', 
		'\x12', '\n', '\x2', 'x', 'v', '\x3', '\x2', '\x2', '\x2', 'y', '|', '\x3', 
		'\x2', '\x2', '\x2', 'z', 'x', '\x3', '\x2', '\x2', '\x2', 'z', '{', '\x3', 
		'\x2', '\x2', '\x2', '{', '\x11', '\x3', '\x2', '\x2', '\x2', '|', 'z', 
		'\x3', '\x2', '\x2', '\x2', '}', '~', '\x5', '(', '\x15', '\x2', '~', 
		'\x7F', '\a', '\xE', '\x2', '\x2', '\x7F', '\x80', '\x5', '*', '\x16', 
		'\x2', '\x80', '\x13', '\x3', '\x2', '\x2', '\x2', '\x81', '\x82', '\a', 
		'\x19', '\x2', '\x2', '\x82', '\x83', '\a', '\x12', '\x2', '\x2', '\x83', 
		'\x84', '\x5', '.', '\x18', '\x2', '\x84', '\x85', '\x5', '\x16', '\f', 
		'\x2', '\x85', '\x86', '\a', '\xF', '\x2', '\x2', '\x86', '\x87', '\x5', 
		'*', '\x16', '\x2', '\x87', '\x15', '\x3', '\x2', '\x2', '\x2', '\x88', 
		'\x89', '\a', '\x6', '\x2', '\x2', '\x89', '\x8B', '\x5', '(', '\x15', 
		'\x2', '\x8A', '\x88', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x8C', '\x3', 
		'\x2', '\x2', '\x2', '\x8C', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x8C', 
		'\x8D', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\x8E', '\x93', '\x5', '(', '\x15', '\x2', '\x8F', '\x90', '\a', 
		'\x5', '\x2', '\x2', '\x90', '\x92', '\x5', '(', '\x15', '\x2', '\x91', 
		'\x8F', '\x3', '\x2', '\x2', '\x2', '\x92', '\x95', '\x3', '\x2', '\x2', 
		'\x2', '\x93', '\x91', '\x3', '\x2', '\x2', '\x2', '\x93', '\x94', '\x3', 
		'\x2', '\x2', '\x2', '\x94', '\x19', '\x3', '\x2', '\x2', '\x2', '\x95', 
		'\x93', '\x3', '\x2', '\x2', '\x2', '\x96', '\x9B', '\x5', '.', '\x18', 
		'\x2', '\x97', '\x98', '\a', '\x5', '\x2', '\x2', '\x98', '\x9A', '\x5', 
		'.', '\x18', '\x2', '\x99', '\x97', '\x3', '\x2', '\x2', '\x2', '\x9A', 
		'\x9D', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x99', '\x3', '\x2', '\x2', 
		'\x2', '\x9B', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', '\x9D', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x9E', 
		'\x9F', '\a', '\x19', '\x2', '\x2', '\x9F', '\xA0', '\a', '\x10', '\x2', 
		'\x2', '\xA0', '\xA2', '\x5', '.', '\x18', '\x2', '\xA1', '\xA3', '\x5', 
		'\x16', '\f', '\x2', '\xA2', '\xA1', '\x3', '\x2', '\x2', '\x2', '\xA2', 
		'\xA3', '\x3', '\x2', '\x2', '\x2', '\xA3', '\xA4', '\x3', '\x2', '\x2', 
		'\x2', '\xA4', '\xA7', '\a', '\x3', '\x2', '\x2', '\xA5', '\xA8', '\x5', 
		'\x18', '\r', '\x2', '\xA6', '\xA8', '\x5', '\x30', '\x19', '\x2', '\xA7', 
		'\xA5', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xA6', '\x3', '\x2', '\x2', 
		'\x2', '\xA7', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xA9', '\x3', 
		'\x2', '\x2', '\x2', '\xA9', '\xAD', '\a', '\x4', '\x2', '\x2', '\xAA', 
		'\xAC', '\x5', '\x1E', '\x10', '\x2', '\xAB', '\xAA', '\x3', '\x2', '\x2', 
		'\x2', '\xAC', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xAB', '\x3', 
		'\x2', '\x2', '\x2', '\xAD', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xAE', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xAD', '\x3', '\x2', '\x2', 
		'\x2', '\xB0', '\xB1', '\a', '\x13', '\x2', '\x2', '\xB1', '\xB2', '\a', 
		'\x3', '\x2', '\x2', '\xB2', '\xB3', '\x5', '(', '\x15', '\x2', '\xB3', 
		'\xB6', '\a', '\x3', '\x2', '\x2', '\xB4', '\xB7', '\x5', '\x18', '\r', 
		'\x2', '\xB5', '\xB7', '\x5', '\x30', '\x19', '\x2', '\xB6', '\xB4', '\x3', 
		'\x2', '\x2', '\x2', '\xB6', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xB6', 
		'\xB7', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xB8', '\x3', '\x2', '\x2', 
		'\x2', '\xB8', '\xBC', '\a', '\x4', '\x2', '\x2', '\xB9', '\xBB', '\x5', 
		'\x1E', '\x10', '\x2', '\xBA', '\xB9', '\x3', '\x2', '\x2', '\x2', '\xBB', 
		'\xBE', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xBA', '\x3', '\x2', '\x2', 
		'\x2', '\xBC', '\xBD', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xBF', '\x3', 
		'\x2', '\x2', '\x2', '\xBE', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xBF', 
		'\xC0', '\a', '\x4', '\x2', '\x2', '\xC0', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '\xC1', '\xC2', '\a', '\x19', '\x2', '\x2', '\xC2', '\xC3', '\x5', 
		'&', '\x14', '\x2', '\xC3', '\xC4', '\a', '\x3', '\x2', '\x2', '\xC4', 
		'\xC5', '\x5', '.', '\x18', '\x2', '\xC5', '\xC6', '\a', '\x3', '\x2', 
		'\x2', '\xC6', '\xC7', '\x5', '(', '\x15', '\x2', '\xC7', '\xC8', '\a', 
		'\x4', '\x2', '\x2', '\xC8', '\xC9', '\a', '\x4', '\x2', '\x2', '\xC9', 
		'!', '\x3', '\x2', '\x2', '\x2', '\xCA', '\xCF', '\x5', '*', '\x16', '\x2', 
		'\xCB', '\xCC', '\a', '\x5', '\x2', '\x2', '\xCC', '\xCE', '\x5', '*', 
		'\x16', '\x2', '\xCD', '\xCB', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xD1', 
		'\x3', '\x2', '\x2', '\x2', '\xCF', '\xCD', '\x3', '\x2', '\x2', '\x2', 
		'\xCF', '\xD0', '\x3', '\x2', '\x2', '\x2', '\xD0', '#', '\x3', '\x2', 
		'\x2', '\x2', '\xD1', '\xCF', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xD4', 
		'\a', '\a', '\x2', '\x2', '\xD3', '\xD5', '\x5', '\"', '\x12', '\x2', 
		'\xD4', '\xD3', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD5', '\x3', '\x2', 
		'\x2', '\x2', '\xD5', '\xD6', '\x3', '\x2', '\x2', '\x2', '\xD6', '\xD7', 
		'\a', '\b', '\x2', '\x2', '\xD7', '%', '\x3', '\x2', '\x2', '\x2', '\xD8', 
		'\xD9', '\t', '\x2', '\x2', '\x2', '\xD9', '\'', '\x3', '\x2', '\x2', 
		'\x2', '\xDA', '\xDB', '\a', '\"', '\x2', '\x2', '\xDB', ')', '\x3', '\x2', 
		'\x2', '\x2', '\xDC', '\xDD', '\a', '\x3', '\x2', '\x2', '\xDD', '\xDE', 
		'\x5', '\x4', '\x3', '\x2', '\xDE', '\xDF', '\a', '\x4', '\x2', '\x2', 
		'\xDF', '\xE6', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xE6', '\a', '\"', 
		'\x2', '\x2', '\xE1', '\xE6', '\a', '&', '\x2', '\x2', '\xE2', '\xE6', 
		'\a', '#', '\x2', '\x2', '\xE3', '\xE6', '\a', '%', '\x2', '\x2', '\xE4', 
		'\xE6', '\x5', '$', '\x13', '\x2', '\xE5', '\xDC', '\x3', '\x2', '\x2', 
		'\x2', '\xE5', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xE1', '\x3', 
		'\x2', '\x2', '\x2', '\xE5', '\xE2', '\x3', '\x2', '\x2', '\x2', '\xE5', 
		'\xE3', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xE4', '\x3', '\x2', '\x2', 
		'\x2', '\xE6', '+', '\x3', '\x2', '\x2', '\x2', '\xE7', '\xE8', '\a', 
		'\"', '\x2', '\x2', '\xE8', '-', '\x3', '\x2', '\x2', '\x2', '\xE9', '\xEA', 
		'\t', '\x3', '\x2', '\x2', '\xEA', '/', '\x3', '\x2', '\x2', '\x2', '\xEB', 
		'\xEC', '\a', '\r', '\x2', '\x2', '\xEC', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '\x16', '\x36', '>', '\x43', 'H', 'P', 'X', ']', 'i', 'z', '\x8C', 
		'\x93', '\x9B', '\xA2', '\xA7', '\xAD', '\xB6', '\xBC', '\xCF', '\xD4', 
		'\xE5',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}

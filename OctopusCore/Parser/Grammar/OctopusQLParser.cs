//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from OctopusQL.g4 by ANTLR 4.9

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9")]
[System.CLSCompliant(false)]
public partial class OctopusQLParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		COMPARATOR=10, SELECT=11, FROM=12, WHERE=13, INCLUDE=14, PIPELINE=15, 
		EQUALS=16, GT=17, GTE=18, LT=19, LTE=20, WORD=21, NUMBER=22, ENT=23, ENTREP=24, 
		TEXT=25, WHITESPACE=26;
	public const int
		RULE_r = 0, RULE_select = 1, RULE_whereClause = 2, RULE_fieldsWithDot = 3, 
		RULE_fields = 4, RULE_selectClause = 5, RULE_include = 6, RULE_aggregateClause = 7, 
		RULE_func = 8, RULE_field = 9, RULE_value = 10, RULE_entity = 11, RULE_entityRep = 12, 
		RULE_all = 13;
	public static readonly string[] ruleNames = {
		"r", "select", "whereClause", "fieldsWithDot", "fields", "selectClause", 
		"include", "aggregateClause", "func", "field", "value", "entity", "entityRep", 
		"all"
	};

	private static readonly string[] _LiteralNames = {
		null, "'.'", "','", "'('", "')'", "'AVG'", "'SUM'", "'MIN'", "'MAX'", 
		"'*'", null, null, null, null, null, "'|'", "'=='", "'>'", "'>='", "'<'", 
		"'<='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, "COMPARATOR", 
		"SELECT", "FROM", "WHERE", "INCLUDE", "PIPELINE", "EQUALS", "GT", "GTE", 
		"LT", "LTE", "WORD", "NUMBER", "ENT", "ENTREP", "TEXT", "WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "OctopusQL.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static OctopusQLParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public OctopusQLParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public OctopusQLParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class RContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectContext select() {
			return GetRuleContext<SelectContext>(0);
		}
		public RContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_r; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.EnterR(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.ExitR(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOctopusQLVisitor<TResult> typedVisitor = visitor as IOctopusQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitR(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RContext r() {
		RContext _localctx = new RContext(Context, State);
		EnterRule(_localctx, 0, RULE_r);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 28; select();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(OctopusQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EntityContext entity() {
			return GetRuleContext<EntityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EntityRepContext entityRep() {
			return GetRuleContext<EntityRepContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectClauseContext selectClause() {
			return GetRuleContext<SelectClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AggregateClauseContext aggregateClause() {
			return GetRuleContext<AggregateClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhereClauseContext[] whereClause() {
			return GetRuleContexts<WhereClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhereClauseContext whereClause(int i) {
			return GetRuleContext<WhereClauseContext>(i);
		}
		public SelectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.EnterSelect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.ExitSelect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOctopusQLVisitor<TResult> typedVisitor = visitor as IOctopusQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectContext select() {
		SelectContext _localctx = new SelectContext(Context, State);
		EnterRule(_localctx, 2, RULE_select);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 30; Match(FROM);
			State = 31; entity();
			State = 32; entityRep();
			State = 36;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 33; whereClause();
					}
					} 
				}
				State = 38;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			State = 41;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				{
				State = 39; selectClause();
				}
				break;
			case 2:
				{
				State = 40; aggregateClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhereClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIPELINE() { return GetToken(OctopusQLParser.PIPELINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(OctopusQLParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EntityRepContext entityRep() {
			return GetRuleContext<EntityRepContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldsWithDotContext fieldsWithDot() {
			return GetRuleContext<FieldsWithDotContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPARATOR() { return GetToken(OctopusQLParser.COMPARATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public WhereClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whereClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.EnterWhereClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.ExitWhereClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOctopusQLVisitor<TResult> typedVisitor = visitor as IOctopusQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhereClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhereClauseContext whereClause() {
		WhereClauseContext _localctx = new WhereClauseContext(Context, State);
		EnterRule(_localctx, 4, RULE_whereClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 43; Match(PIPELINE);
			State = 44; Match(WHERE);
			State = 45; entityRep();
			State = 46; fieldsWithDot();
			State = 47; Match(COMPARATOR);
			State = 48; value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldsWithDotContext : ParserRuleContext {
		public FieldContext _field;
		public IList<FieldContext> _el = new List<FieldContext>();
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext[] field() {
			return GetRuleContexts<FieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field(int i) {
			return GetRuleContext<FieldContext>(i);
		}
		public FieldsWithDotContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldsWithDot; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.EnterFieldsWithDot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.ExitFieldsWithDot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOctopusQLVisitor<TResult> typedVisitor = visitor as IOctopusQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldsWithDot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldsWithDotContext fieldsWithDot() {
		FieldsWithDotContext _localctx = new FieldsWithDotContext(Context, State);
		EnterRule(_localctx, 6, RULE_fieldsWithDot);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 50; Match(T__0);
				State = 51; _localctx._field = field();
				_localctx._el.Add(_localctx._field);
				}
				}
				State = 54;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__0 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldsContext : ParserRuleContext {
		public FieldContext _field;
		public IList<FieldContext> _fieldList = new List<FieldContext>();
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext[] field() {
			return GetRuleContexts<FieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field(int i) {
			return GetRuleContext<FieldContext>(i);
		}
		public FieldsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fields; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.EnterFields(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.ExitFields(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOctopusQLVisitor<TResult> typedVisitor = visitor as IOctopusQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFields(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldsContext fields() {
		FieldsContext _localctx = new FieldsContext(Context, State);
		EnterRule(_localctx, 8, RULE_fields);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56; _localctx._field = field();
			_localctx._fieldList.Add(_localctx._field);
			State = 61;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 57; Match(T__1);
				State = 58; _localctx._field = field();
				_localctx._fieldList.Add(_localctx._field);
				}
				}
				State = 63;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIPELINE() { return GetToken(OctopusQLParser.PIPELINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(OctopusQLParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EntityRepContext entityRep() {
			return GetRuleContext<EntityRepContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldsWithDotContext fieldsWithDot() {
			return GetRuleContext<FieldsWithDotContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldsContext fields() {
			return GetRuleContext<FieldsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AllContext all() {
			return GetRuleContext<AllContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IncludeContext[] include() {
			return GetRuleContexts<IncludeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IncludeContext include(int i) {
			return GetRuleContext<IncludeContext>(i);
		}
		public SelectClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.EnterSelectClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.ExitSelectClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOctopusQLVisitor<TResult> typedVisitor = visitor as IOctopusQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectClauseContext selectClause() {
		SelectClauseContext _localctx = new SelectClauseContext(Context, State);
		EnterRule(_localctx, 10, RULE_selectClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64; Match(PIPELINE);
			State = 65; Match(SELECT);
			State = 66; entityRep();
			State = 68;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 67; fieldsWithDot();
				}
			}

			State = 70; Match(T__2);
			State = 73;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WORD:
				{
				State = 71; fields();
				}
				break;
			case T__8:
				{
				State = 72; all();
				}
				break;
			case T__3:
				break;
			default:
				break;
			}
			State = 75; Match(T__3);
			State = 79;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==INCLUDE) {
				{
				{
				State = 76; include();
				}
				}
				State = 81;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncludeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCLUDE() { return GetToken(OctopusQLParser.INCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldsContext fields() {
			return GetRuleContext<FieldsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AllContext all() {
			return GetRuleContext<AllContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IncludeContext[] include() {
			return GetRuleContexts<IncludeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IncludeContext include(int i) {
			return GetRuleContext<IncludeContext>(i);
		}
		public IncludeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_include; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.EnterInclude(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.ExitInclude(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOctopusQLVisitor<TResult> typedVisitor = visitor as IOctopusQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInclude(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncludeContext include() {
		IncludeContext _localctx = new IncludeContext(Context, State);
		EnterRule(_localctx, 12, RULE_include);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82; Match(INCLUDE);
			State = 83; Match(T__2);
			State = 84; field();
			State = 85; Match(T__2);
			State = 88;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WORD:
				{
				State = 86; fields();
				}
				break;
			case T__8:
				{
				State = 87; all();
				}
				break;
			case T__3:
				break;
			default:
				break;
			}
			State = 90; Match(T__3);
			State = 94;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==INCLUDE) {
				{
				{
				State = 91; include();
				}
				}
				State = 96;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 97; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AggregateClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIPELINE() { return GetToken(OctopusQLParser.PIPELINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FuncContext func() {
			return GetRuleContext<FuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EntityRepContext entityRep() {
			return GetRuleContext<EntityRepContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		public AggregateClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggregateClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.EnterAggregateClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.ExitAggregateClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOctopusQLVisitor<TResult> typedVisitor = visitor as IOctopusQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAggregateClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AggregateClauseContext aggregateClause() {
		AggregateClauseContext _localctx = new AggregateClauseContext(Context, State);
		EnterRule(_localctx, 14, RULE_aggregateClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99; Match(PIPELINE);
			State = 100; func();
			State = 101; Match(T__2);
			State = 102; entityRep();
			State = 103; Match(T__2);
			State = 104; field();
			State = 105; Match(T__3);
			State = 106; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncContext : ParserRuleContext {
		public FuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.EnterFunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.ExitFunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOctopusQLVisitor<TResult> typedVisitor = visitor as IOctopusQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncContext func() {
		FuncContext _localctx = new FuncContext(Context, State);
		EnterRule(_localctx, 16, RULE_func);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD() { return GetToken(OctopusQLParser.WORD, 0); }
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.EnterField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.ExitField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOctopusQLVisitor<TResult> typedVisitor = visitor as IOctopusQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(Context, State);
		EnterRule(_localctx, 18, RULE_field);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110; Match(WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD() { return GetToken(OctopusQLParser.WORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(OctopusQLParser.TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(OctopusQLParser.NUMBER, 0); }
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOctopusQLVisitor<TResult> typedVisitor = visitor as IOctopusQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 20, RULE_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << WORD) | (1L << NUMBER) | (1L << TEXT))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD() { return GetToken(OctopusQLParser.WORD, 0); }
		public EntityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.EnterEntity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.ExitEntity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOctopusQLVisitor<TResult> typedVisitor = visitor as IOctopusQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntityContext entity() {
		EntityContext _localctx = new EntityContext(Context, State);
		EnterRule(_localctx, 22, RULE_entity);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114; Match(WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityRepContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENTREP() { return GetToken(OctopusQLParser.ENTREP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD() { return GetToken(OctopusQLParser.WORD, 0); }
		public EntityRepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entityRep; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.EnterEntityRep(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.ExitEntityRep(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOctopusQLVisitor<TResult> typedVisitor = visitor as IOctopusQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntityRep(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntityRepContext entityRep() {
		EntityRepContext _localctx = new EntityRepContext(Context, State);
		EnterRule(_localctx, 24, RULE_entityRep);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116;
			_la = TokenStream.LA(1);
			if ( !(_la==WORD || _la==ENTREP) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AllContext : ParserRuleContext {
		public AllContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_all; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.EnterAll(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.ExitAll(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOctopusQLVisitor<TResult> typedVisitor = visitor as IOctopusQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAll(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AllContext all() {
		AllContext _localctx = new AllContext(Context, State);
		EnterRule(_localctx, 26, RULE_all);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118; Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x1C', '{', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', '%', '\n', '\x3', 
		'\f', '\x3', '\xE', '\x3', '(', '\v', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x5', '\x3', ',', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x6', '\x5', '\x37', '\n', '\x5', '\r', '\x5', '\xE', '\x5', 
		'\x38', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', '>', '\n', 
		'\x6', '\f', '\x6', '\xE', '\x6', '\x41', '\v', '\x6', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 'G', '\n', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x5', '\a', 'L', '\n', '\a', '\x3', '\a', '\x3', 
		'\a', '\a', '\a', 'P', '\n', '\a', '\f', '\a', '\xE', '\a', 'S', '\v', 
		'\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x5', '\b', '[', '\n', '\b', '\x3', '\b', '\x3', '\b', '\a', 
		'\b', '_', '\n', '\b', '\f', '\b', '\xE', '\b', '\x62', '\v', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', 
		'\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x2', '\x2', '\x10', '\x2', '\x4', '\x6', '\b', 
		'\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', 
		'\x2', '\x5', '\x3', '\x2', '\a', '\n', '\x4', '\x2', '\x17', '\x18', 
		'\x1B', '\x1B', '\x4', '\x2', '\x17', '\x17', '\x1A', '\x1A', '\x2', 'w', 
		'\x2', '\x1E', '\x3', '\x2', '\x2', '\x2', '\x4', ' ', '\x3', '\x2', '\x2', 
		'\x2', '\x6', '-', '\x3', '\x2', '\x2', '\x2', '\b', '\x36', '\x3', '\x2', 
		'\x2', '\x2', '\n', ':', '\x3', '\x2', '\x2', '\x2', '\f', '\x42', '\x3', 
		'\x2', '\x2', '\x2', '\xE', 'T', '\x3', '\x2', '\x2', '\x2', '\x10', '\x65', 
		'\x3', '\x2', '\x2', '\x2', '\x12', 'n', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'p', '\x3', '\x2', '\x2', '\x2', '\x16', 'r', '\x3', '\x2', '\x2', '\x2', 
		'\x18', 't', '\x3', '\x2', '\x2', '\x2', '\x1A', 'v', '\x3', '\x2', '\x2', 
		'\x2', '\x1C', 'x', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x1F', '\x5', 
		'\x4', '\x3', '\x2', '\x1F', '\x3', '\x3', '\x2', '\x2', '\x2', ' ', '!', 
		'\a', '\xE', '\x2', '\x2', '!', '\"', '\x5', '\x18', '\r', '\x2', '\"', 
		'&', '\x5', '\x1A', '\xE', '\x2', '#', '%', '\x5', '\x6', '\x4', '\x2', 
		'$', '#', '\x3', '\x2', '\x2', '\x2', '%', '(', '\x3', '\x2', '\x2', '\x2', 
		'&', '$', '\x3', '\x2', '\x2', '\x2', '&', '\'', '\x3', '\x2', '\x2', 
		'\x2', '\'', '+', '\x3', '\x2', '\x2', '\x2', '(', '&', '\x3', '\x2', 
		'\x2', '\x2', ')', ',', '\x5', '\f', '\a', '\x2', '*', ',', '\x5', '\x10', 
		'\t', '\x2', '+', ')', '\x3', '\x2', '\x2', '\x2', '+', '*', '\x3', '\x2', 
		'\x2', '\x2', ',', '\x5', '\x3', '\x2', '\x2', '\x2', '-', '.', '\a', 
		'\x11', '\x2', '\x2', '.', '/', '\a', '\xF', '\x2', '\x2', '/', '\x30', 
		'\x5', '\x1A', '\xE', '\x2', '\x30', '\x31', '\x5', '\b', '\x5', '\x2', 
		'\x31', '\x32', '\a', '\f', '\x2', '\x2', '\x32', '\x33', '\x5', '\x16', 
		'\f', '\x2', '\x33', '\a', '\x3', '\x2', '\x2', '\x2', '\x34', '\x35', 
		'\a', '\x3', '\x2', '\x2', '\x35', '\x37', '\x5', '\x14', '\v', '\x2', 
		'\x36', '\x34', '\x3', '\x2', '\x2', '\x2', '\x37', '\x38', '\x3', '\x2', 
		'\x2', '\x2', '\x38', '\x36', '\x3', '\x2', '\x2', '\x2', '\x38', '\x39', 
		'\x3', '\x2', '\x2', '\x2', '\x39', '\t', '\x3', '\x2', '\x2', '\x2', 
		':', '?', '\x5', '\x14', '\v', '\x2', ';', '<', '\a', '\x4', '\x2', '\x2', 
		'<', '>', '\x5', '\x14', '\v', '\x2', '=', ';', '\x3', '\x2', '\x2', '\x2', 
		'>', '\x41', '\x3', '\x2', '\x2', '\x2', '?', '=', '\x3', '\x2', '\x2', 
		'\x2', '?', '@', '\x3', '\x2', '\x2', '\x2', '@', '\v', '\x3', '\x2', 
		'\x2', '\x2', '\x41', '?', '\x3', '\x2', '\x2', '\x2', '\x42', '\x43', 
		'\a', '\x11', '\x2', '\x2', '\x43', '\x44', '\a', '\r', '\x2', '\x2', 
		'\x44', '\x46', '\x5', '\x1A', '\xE', '\x2', '\x45', 'G', '\x5', '\b', 
		'\x5', '\x2', '\x46', '\x45', '\x3', '\x2', '\x2', '\x2', '\x46', 'G', 
		'\x3', '\x2', '\x2', '\x2', 'G', 'H', '\x3', '\x2', '\x2', '\x2', 'H', 
		'K', '\a', '\x5', '\x2', '\x2', 'I', 'L', '\x5', '\n', '\x6', '\x2', 'J', 
		'L', '\x5', '\x1C', '\xF', '\x2', 'K', 'I', '\x3', '\x2', '\x2', '\x2', 
		'K', 'J', '\x3', '\x2', '\x2', '\x2', 'K', 'L', '\x3', '\x2', '\x2', '\x2', 
		'L', 'M', '\x3', '\x2', '\x2', '\x2', 'M', 'Q', '\a', '\x6', '\x2', '\x2', 
		'N', 'P', '\x5', '\xE', '\b', '\x2', 'O', 'N', '\x3', '\x2', '\x2', '\x2', 
		'P', 'S', '\x3', '\x2', '\x2', '\x2', 'Q', 'O', '\x3', '\x2', '\x2', '\x2', 
		'Q', 'R', '\x3', '\x2', '\x2', '\x2', 'R', '\r', '\x3', '\x2', '\x2', 
		'\x2', 'S', 'Q', '\x3', '\x2', '\x2', '\x2', 'T', 'U', '\a', '\x10', '\x2', 
		'\x2', 'U', 'V', '\a', '\x5', '\x2', '\x2', 'V', 'W', '\x5', '\x14', '\v', 
		'\x2', 'W', 'Z', '\a', '\x5', '\x2', '\x2', 'X', '[', '\x5', '\n', '\x6', 
		'\x2', 'Y', '[', '\x5', '\x1C', '\xF', '\x2', 'Z', 'X', '\x3', '\x2', 
		'\x2', '\x2', 'Z', 'Y', '\x3', '\x2', '\x2', '\x2', 'Z', '[', '\x3', '\x2', 
		'\x2', '\x2', '[', '\\', '\x3', '\x2', '\x2', '\x2', '\\', '`', '\a', 
		'\x6', '\x2', '\x2', ']', '_', '\x5', '\xE', '\b', '\x2', '^', ']', '\x3', 
		'\x2', '\x2', '\x2', '_', '\x62', '\x3', '\x2', '\x2', '\x2', '`', '^', 
		'\x3', '\x2', '\x2', '\x2', '`', '\x61', '\x3', '\x2', '\x2', '\x2', '\x61', 
		'\x63', '\x3', '\x2', '\x2', '\x2', '\x62', '`', '\x3', '\x2', '\x2', 
		'\x2', '\x63', '\x64', '\a', '\x6', '\x2', '\x2', '\x64', '\xF', '\x3', 
		'\x2', '\x2', '\x2', '\x65', '\x66', '\a', '\x11', '\x2', '\x2', '\x66', 
		'g', '\x5', '\x12', '\n', '\x2', 'g', 'h', '\a', '\x5', '\x2', '\x2', 
		'h', 'i', '\x5', '\x1A', '\xE', '\x2', 'i', 'j', '\a', '\x5', '\x2', '\x2', 
		'j', 'k', '\x5', '\x14', '\v', '\x2', 'k', 'l', '\a', '\x6', '\x2', '\x2', 
		'l', 'm', '\a', '\x6', '\x2', '\x2', 'm', '\x11', '\x3', '\x2', '\x2', 
		'\x2', 'n', 'o', '\t', '\x2', '\x2', '\x2', 'o', '\x13', '\x3', '\x2', 
		'\x2', '\x2', 'p', 'q', '\a', '\x17', '\x2', '\x2', 'q', '\x15', '\x3', 
		'\x2', '\x2', '\x2', 'r', 's', '\t', '\x3', '\x2', '\x2', 's', '\x17', 
		'\x3', '\x2', '\x2', '\x2', 't', 'u', '\a', '\x17', '\x2', '\x2', 'u', 
		'\x19', '\x3', '\x2', '\x2', '\x2', 'v', 'w', '\t', '\x4', '\x2', '\x2', 
		'w', '\x1B', '\x3', '\x2', '\x2', '\x2', 'x', 'y', '\a', '\v', '\x2', 
		'\x2', 'y', '\x1D', '\x3', '\x2', '\x2', '\x2', '\v', '&', '+', '\x38', 
		'?', '\x46', 'K', 'Q', 'Z', '`',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from OctopusQL.g4 by ANTLR 4.9

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9")]
[System.CLSCompliant(false)]
public partial class OctopusQLParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, EQUALS=12, ASSIGN=13, COMPARATOR=14, SELECT=15, FROM=16, 
		WHERE=17, INCLUDE=18, ENTITY=19, INSERT=20, DELETE=21, UPDATE=22, PIPELINE=23, 
		COLON=24, ISEQUALS=25, GT=26, GTE=27, LT=28, LTE=29, ADD=30, REMOVE=31, 
		WORD=32, NUMBER=33, ENT=34, ENTREP=35, TEXT=36, WHITESPACE=37;
	public const int
		RULE_r = 0, RULE_select = 1, RULE_deleteSelect = 2, RULE_insert = 3, RULE_delete = 4, 
		RULE_update = 5, RULE_insertClause = 6, RULE_getClause = 7, RULE_assignments = 8, 
		RULE_assignment = 9, RULE_whereClause = 10, RULE_fieldsWithDot = 11, RULE_fields = 12, 
		RULE_entityReps = 13, RULE_selectClause = 14, RULE_include = 15, RULE_aggregateClause = 16, 
		RULE_values = 17, RULE_array = 18, RULE_func = 19, RULE_field = 20, RULE_value = 21, 
		RULE_entity = 22, RULE_entityRep = 23, RULE_all = 24;
	public static readonly string[] ruleNames = {
		"r", "select", "deleteSelect", "insert", "delete", "update", "insertClause", 
		"getClause", "assignments", "assignment", "whereClause", "fieldsWithDot", 
		"fields", "entityReps", "selectClause", "include", "aggregateClause", 
		"values", "array", "func", "field", "value", "entity", "entityRep", "all"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "','", "'.'", "'['", "']'", "'AVG'", "'SUM'", "'MIN'", 
		"'MAX'", "'*'", "'='", null, null, null, null, null, null, null, null, 
		null, null, "'|'", "':'", "'=='", "'>'", "'>='", "'<'", "'<='", "'+='", 
		"'-='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"EQUALS", "ASSIGN", "COMPARATOR", "SELECT", "FROM", "WHERE", "INCLUDE", 
		"ENTITY", "INSERT", "DELETE", "UPDATE", "PIPELINE", "COLON", "ISEQUALS", 
		"GT", "GTE", "LT", "LTE", "ADD", "REMOVE", "WORD", "NUMBER", "ENT", "ENTREP", 
		"TEXT", "WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "OctopusQL.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static OctopusQLParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public OctopusQLParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public OctopusQLParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class RContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectContext select() {
			return GetRuleContext<SelectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertContext insert() {
			return GetRuleContext<InsertContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteContext delete() {
			return GetRuleContext<DeleteContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdateContext update() {
			return GetRuleContext<UpdateContext>(0);
		}
		public RContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_r; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.EnterR(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.ExitR(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOctopusQLVisitor<TResult> typedVisitor = visitor as IOctopusQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitR(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RContext r() {
		RContext _localctx = new RContext(Context, State);
		EnterRule(_localctx, 0, RULE_r);
		try {
			State = 54;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 50; select();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 51; insert();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 52; delete();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 53; update();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(OctopusQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EntityContext entity() {
			return GetRuleContext<EntityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EntityRepContext entityRep() {
			return GetRuleContext<EntityRepContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectClauseContext selectClause() {
			return GetRuleContext<SelectClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AggregateClauseContext aggregateClause() {
			return GetRuleContext<AggregateClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhereClauseContext[] whereClause() {
			return GetRuleContexts<WhereClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhereClauseContext whereClause(int i) {
			return GetRuleContext<WhereClauseContext>(i);
		}
		public SelectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.EnterSelect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.ExitSelect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOctopusQLVisitor<TResult> typedVisitor = visitor as IOctopusQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectContext select() {
		SelectContext _localctx = new SelectContext(Context, State);
		EnterRule(_localctx, 2, RULE_select);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 56; Match(FROM);
			State = 57; entity();
			State = 58; entityRep();
			State = 62;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 59; whereClause();
					}
					} 
				}
				State = 64;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			State = 67;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 65; selectClause();
				}
				break;
			case 2:
				{
				State = 66; aggregateClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteSelectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(OctopusQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EntityContext entity() {
			return GetRuleContext<EntityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EntityRepContext entityRep() {
			return GetRuleContext<EntityRepContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhereClauseContext[] whereClause() {
			return GetRuleContexts<WhereClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhereClauseContext whereClause(int i) {
			return GetRuleContext<WhereClauseContext>(i);
		}
		public DeleteSelectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteSelect; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.EnterDeleteSelect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.ExitDeleteSelect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOctopusQLVisitor<TResult> typedVisitor = visitor as IOctopusQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteSelect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteSelectContext deleteSelect() {
		DeleteSelectContext _localctx = new DeleteSelectContext(Context, State);
		EnterRule(_localctx, 4, RULE_deleteSelect);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69; Match(FROM);
			State = 70; entity();
			State = 71; entityRep();
			State = 75;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PIPELINE) {
				{
				{
				State = 72; whereClause();
				}
				}
				State = 77;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(OctopusQLParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EntityRepsContext entityReps() {
			return GetRuleContext<EntityRepsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertClauseContext[] insertClause() {
			return GetRuleContexts<InsertClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertClauseContext insertClause(int i) {
			return GetRuleContext<InsertClauseContext>(i);
		}
		public InsertContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.EnterInsert(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.ExitInsert(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOctopusQLVisitor<TResult> typedVisitor = visitor as IOctopusQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsert(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsertContext insert() {
		InsertContext _localctx = new InsertContext(Context, State);
		EnterRule(_localctx, 6, RULE_insert);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 78; insertClause();
				}
				}
				State = 81;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ENTITY );
			State = 83; Match(INSERT);
			State = 84; entityReps();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(OctopusQLParser.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeleteSelectContext deleteSelect() {
			return GetRuleContext<DeleteSelectContext>(0);
		}
		public DeleteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delete; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.EnterDelete(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.ExitDelete(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOctopusQLVisitor<TResult> typedVisitor = visitor as IOctopusQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelete(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteContext delete() {
		DeleteContext _localctx = new DeleteContext(Context, State);
		EnterRule(_localctx, 8, RULE_delete);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86; Match(DELETE);
			State = 87; deleteSelect();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(OctopusQLParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EntityRepContext entityRep() {
			return GetRuleContext<EntityRepContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(OctopusQLParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GetClauseContext[] getClause() {
			return GetRuleContexts<GetClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GetClauseContext getClause(int i) {
			return GetRuleContext<GetClauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldsWithDotContext fieldsWithDot() {
			return GetRuleContext<FieldsWithDotContext>(0);
		}
		public UpdateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_update; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.EnterUpdate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.ExitUpdate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOctopusQLVisitor<TResult> typedVisitor = visitor as IOctopusQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateContext update() {
		UpdateContext _localctx = new UpdateContext(Context, State);
		EnterRule(_localctx, 10, RULE_update);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 89; getClause();
				}
				}
				State = 92;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ENTITY );
			State = 94; Match(UPDATE);
			State = 95; entityRep();
			State = 97;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 96; fieldsWithDot();
				}
			}

			State = 99; Match(ASSIGN);
			State = 100; value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENTITY() { return GetToken(OctopusQLParser.ENTITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EntityContext entity() {
			return GetRuleContext<EntityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(OctopusQLParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EntityRepContext entityRep() {
			return GetRuleContext<EntityRepContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentsContext assignments() {
			return GetRuleContext<AssignmentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectContext select() {
			return GetRuleContext<SelectContext>(0);
		}
		public InsertClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.EnterInsertClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.ExitInsertClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOctopusQLVisitor<TResult> typedVisitor = visitor as IOctopusQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsertClauseContext insertClause() {
		InsertClauseContext _localctx = new InsertClauseContext(Context, State);
		EnterRule(_localctx, 12, RULE_insertClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102; Match(ENTITY);
			State = 103; entity();
			State = 104; Match(COLON);
			State = 105; entityRep();
			State = 106; Match(T__0);
			State = 109;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WORD:
				{
				State = 107; assignments();
				}
				break;
			case FROM:
				{
				State = 108; select();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 111; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GetClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENTITY() { return GetToken(OctopusQLParser.ENTITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EntityContext entity() {
			return GetRuleContext<EntityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(OctopusQLParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EntityRepContext entityRep() {
			return GetRuleContext<EntityRepContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectContext select() {
			return GetRuleContext<SelectContext>(0);
		}
		public GetClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.EnterGetClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.ExitGetClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOctopusQLVisitor<TResult> typedVisitor = visitor as IOctopusQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GetClauseContext getClause() {
		GetClauseContext _localctx = new GetClauseContext(Context, State);
		EnterRule(_localctx, 14, RULE_getClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113; Match(ENTITY);
			State = 114; entity();
			State = 115; Match(COLON);
			State = 116; entityRep();
			State = 117; Match(T__0);
			State = 118; select();
			State = 119; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentsContext : ParserRuleContext {
		public AssignmentContext _assignment;
		public IList<AssignmentContext> _assignmentList = new List<AssignmentContext>();
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		public AssignmentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.EnterAssignments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.ExitAssignments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOctopusQLVisitor<TResult> typedVisitor = visitor as IOctopusQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentsContext assignments() {
		AssignmentsContext _localctx = new AssignmentsContext(Context, State);
		EnterRule(_localctx, 16, RULE_assignments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121; _localctx._assignment = assignment();
			_localctx._assignmentList.Add(_localctx._assignment);
			State = 126;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2) {
				{
				{
				State = 122; Match(T__2);
				State = 123; _localctx._assignment = assignment();
				_localctx._assignmentList.Add(_localctx._assignment);
				}
				}
				State = 128;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(OctopusQLParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOctopusQLVisitor<TResult> typedVisitor = visitor as IOctopusQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 18, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129; field();
			State = 130; Match(EQUALS);
			State = 131; value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhereClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIPELINE() { return GetToken(OctopusQLParser.PIPELINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(OctopusQLParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EntityRepContext entityRep() {
			return GetRuleContext<EntityRepContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldsWithDotContext fieldsWithDot() {
			return GetRuleContext<FieldsWithDotContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPARATOR() { return GetToken(OctopusQLParser.COMPARATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public WhereClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whereClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.EnterWhereClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.ExitWhereClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOctopusQLVisitor<TResult> typedVisitor = visitor as IOctopusQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhereClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhereClauseContext whereClause() {
		WhereClauseContext _localctx = new WhereClauseContext(Context, State);
		EnterRule(_localctx, 20, RULE_whereClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133; Match(PIPELINE);
			State = 134; Match(WHERE);
			State = 135; entityRep();
			State = 136; fieldsWithDot();
			State = 137; Match(COMPARATOR);
			State = 138; value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldsWithDotContext : ParserRuleContext {
		public FieldContext _field;
		public IList<FieldContext> _el = new List<FieldContext>();
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext[] field() {
			return GetRuleContexts<FieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field(int i) {
			return GetRuleContext<FieldContext>(i);
		}
		public FieldsWithDotContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldsWithDot; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.EnterFieldsWithDot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.ExitFieldsWithDot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOctopusQLVisitor<TResult> typedVisitor = visitor as IOctopusQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldsWithDot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldsWithDotContext fieldsWithDot() {
		FieldsWithDotContext _localctx = new FieldsWithDotContext(Context, State);
		EnterRule(_localctx, 22, RULE_fieldsWithDot);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 140; Match(T__3);
				State = 141; _localctx._field = field();
				_localctx._el.Add(_localctx._field);
				}
				}
				State = 144;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__3 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldsContext : ParserRuleContext {
		public FieldContext _field;
		public IList<FieldContext> _fieldList = new List<FieldContext>();
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext[] field() {
			return GetRuleContexts<FieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field(int i) {
			return GetRuleContext<FieldContext>(i);
		}
		public FieldsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fields; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.EnterFields(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.ExitFields(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOctopusQLVisitor<TResult> typedVisitor = visitor as IOctopusQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFields(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldsContext fields() {
		FieldsContext _localctx = new FieldsContext(Context, State);
		EnterRule(_localctx, 24, RULE_fields);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146; _localctx._field = field();
			_localctx._fieldList.Add(_localctx._field);
			State = 151;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2) {
				{
				{
				State = 147; Match(T__2);
				State = 148; _localctx._field = field();
				_localctx._fieldList.Add(_localctx._field);
				}
				}
				State = 153;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityRepsContext : ParserRuleContext {
		public EntityRepContext _entityRep;
		public IList<EntityRepContext> _entityRepList = new List<EntityRepContext>();
		[System.Diagnostics.DebuggerNonUserCode] public EntityRepContext[] entityRep() {
			return GetRuleContexts<EntityRepContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EntityRepContext entityRep(int i) {
			return GetRuleContext<EntityRepContext>(i);
		}
		public EntityRepsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entityReps; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.EnterEntityReps(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.ExitEntityReps(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOctopusQLVisitor<TResult> typedVisitor = visitor as IOctopusQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntityReps(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntityRepsContext entityReps() {
		EntityRepsContext _localctx = new EntityRepsContext(Context, State);
		EnterRule(_localctx, 26, RULE_entityReps);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154; _localctx._entityRep = entityRep();
			_localctx._entityRepList.Add(_localctx._entityRep);
			State = 159;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2) {
				{
				{
				State = 155; Match(T__2);
				State = 156; _localctx._entityRep = entityRep();
				_localctx._entityRepList.Add(_localctx._entityRep);
				}
				}
				State = 161;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIPELINE() { return GetToken(OctopusQLParser.PIPELINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(OctopusQLParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EntityRepContext entityRep() {
			return GetRuleContext<EntityRepContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldsWithDotContext fieldsWithDot() {
			return GetRuleContext<FieldsWithDotContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldsContext fields() {
			return GetRuleContext<FieldsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AllContext all() {
			return GetRuleContext<AllContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IncludeContext[] include() {
			return GetRuleContexts<IncludeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IncludeContext include(int i) {
			return GetRuleContext<IncludeContext>(i);
		}
		public SelectClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.EnterSelectClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.ExitSelectClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOctopusQLVisitor<TResult> typedVisitor = visitor as IOctopusQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectClauseContext selectClause() {
		SelectClauseContext _localctx = new SelectClauseContext(Context, State);
		EnterRule(_localctx, 28, RULE_selectClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162; Match(PIPELINE);
			State = 163; Match(SELECT);
			State = 164; entityRep();
			State = 166;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 165; fieldsWithDot();
				}
			}

			State = 168; Match(T__0);
			State = 171;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WORD:
				{
				State = 169; fields();
				}
				break;
			case T__10:
				{
				State = 170; all();
				}
				break;
			case T__1:
				break;
			default:
				break;
			}
			State = 173; Match(T__1);
			State = 177;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==INCLUDE) {
				{
				{
				State = 174; include();
				}
				}
				State = 179;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncludeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCLUDE() { return GetToken(OctopusQLParser.INCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldsContext fields() {
			return GetRuleContext<FieldsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AllContext all() {
			return GetRuleContext<AllContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IncludeContext[] include() {
			return GetRuleContexts<IncludeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IncludeContext include(int i) {
			return GetRuleContext<IncludeContext>(i);
		}
		public IncludeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_include; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.EnterInclude(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.ExitInclude(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOctopusQLVisitor<TResult> typedVisitor = visitor as IOctopusQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInclude(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncludeContext include() {
		IncludeContext _localctx = new IncludeContext(Context, State);
		EnterRule(_localctx, 30, RULE_include);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180; Match(INCLUDE);
			State = 181; Match(T__0);
			State = 182; field();
			State = 183; Match(T__0);
			State = 186;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WORD:
				{
				State = 184; fields();
				}
				break;
			case T__10:
				{
				State = 185; all();
				}
				break;
			case T__1:
				break;
			default:
				break;
			}
			State = 188; Match(T__1);
			State = 192;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==INCLUDE) {
				{
				{
				State = 189; include();
				}
				}
				State = 194;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 195; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AggregateClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIPELINE() { return GetToken(OctopusQLParser.PIPELINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FuncContext func() {
			return GetRuleContext<FuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EntityRepContext entityRep() {
			return GetRuleContext<EntityRepContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		public AggregateClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggregateClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.EnterAggregateClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.ExitAggregateClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOctopusQLVisitor<TResult> typedVisitor = visitor as IOctopusQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAggregateClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AggregateClauseContext aggregateClause() {
		AggregateClauseContext _localctx = new AggregateClauseContext(Context, State);
		EnterRule(_localctx, 32, RULE_aggregateClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197; Match(PIPELINE);
			State = 198; func();
			State = 199; Match(T__0);
			State = 200; entityRep();
			State = 201; Match(T__0);
			State = 202; field();
			State = 203; Match(T__1);
			State = 204; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValuesContext : ParserRuleContext {
		public ValueContext _value;
		public IList<ValueContext> _valueList = new List<ValueContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		public ValuesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_values; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.EnterValues(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.ExitValues(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOctopusQLVisitor<TResult> typedVisitor = visitor as IOctopusQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValues(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValuesContext @values() {
		ValuesContext _localctx = new ValuesContext(Context, State);
		EnterRule(_localctx, 34, RULE_values);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206; _localctx._value = value();
			_localctx._valueList.Add(_localctx._value);
			State = 211;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2) {
				{
				{
				State = 207; Match(T__2);
				State = 208; _localctx._value = value();
				_localctx._valueList.Add(_localctx._value);
				}
				}
				State = 213;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValuesContext @values() {
			return GetRuleContext<ValuesContext>(0);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.EnterArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.ExitArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOctopusQLVisitor<TResult> typedVisitor = visitor as IOctopusQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 36, RULE_array);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214; Match(T__4);
			State = 216;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__4) | (1L << WORD) | (1L << NUMBER) | (1L << ENTREP) | (1L << TEXT))) != 0)) {
				{
				State = 215; @values();
				}
			}

			State = 218; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncContext : ParserRuleContext {
		public FuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.EnterFunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.ExitFunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOctopusQLVisitor<TResult> typedVisitor = visitor as IOctopusQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncContext func() {
		FuncContext _localctx = new FuncContext(Context, State);
		EnterRule(_localctx, 38, RULE_func);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 220;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD() { return GetToken(OctopusQLParser.WORD, 0); }
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.EnterField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.ExitField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOctopusQLVisitor<TResult> typedVisitor = visitor as IOctopusQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(Context, State);
		EnterRule(_localctx, 40, RULE_field);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222; Match(WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectContext select() {
			return GetRuleContext<SelectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD() { return GetToken(OctopusQLParser.WORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(OctopusQLParser.TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(OctopusQLParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENTREP() { return GetToken(OctopusQLParser.ENTREP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOctopusQLVisitor<TResult> typedVisitor = visitor as IOctopusQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 42, RULE_value);
		try {
			State = 233;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 224; Match(T__0);
				State = 225; select();
				State = 226; Match(T__1);
				}
				break;
			case WORD:
				EnterOuterAlt(_localctx, 2);
				{
				State = 228; Match(WORD);
				}
				break;
			case TEXT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 229; Match(TEXT);
				}
				break;
			case NUMBER:
				EnterOuterAlt(_localctx, 4);
				{
				State = 230; Match(NUMBER);
				}
				break;
			case ENTREP:
				EnterOuterAlt(_localctx, 5);
				{
				State = 231; Match(ENTREP);
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 6);
				{
				State = 232; array();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD() { return GetToken(OctopusQLParser.WORD, 0); }
		public EntityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.EnterEntity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.ExitEntity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOctopusQLVisitor<TResult> typedVisitor = visitor as IOctopusQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntityContext entity() {
		EntityContext _localctx = new EntityContext(Context, State);
		EnterRule(_localctx, 44, RULE_entity);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 235; Match(WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityRepContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENTREP() { return GetToken(OctopusQLParser.ENTREP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD() { return GetToken(OctopusQLParser.WORD, 0); }
		public EntityRepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entityRep; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.EnterEntityRep(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.ExitEntityRep(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOctopusQLVisitor<TResult> typedVisitor = visitor as IOctopusQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntityRep(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntityRepContext entityRep() {
		EntityRepContext _localctx = new EntityRepContext(Context, State);
		EnterRule(_localctx, 46, RULE_entityRep);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237;
			_la = TokenStream.LA(1);
			if ( !(_la==WORD || _la==ENTREP) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AllContext : ParserRuleContext {
		public AllContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_all; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.EnterAll(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOctopusQLListener typedListener = listener as IOctopusQLListener;
			if (typedListener != null) typedListener.ExitAll(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOctopusQLVisitor<TResult> typedVisitor = visitor as IOctopusQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAll(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AllContext all() {
		AllContext _localctx = new AllContext(Context, State);
		EnterRule(_localctx, 48, RULE_all);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 239; Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\'', '\xF4', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x5', '\x2', '\x39', 
		'\n', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', 
		'\x3', '?', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x42', '\v', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x46', '\n', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', 'L', '\n', 
		'\x4', '\f', '\x4', '\xE', '\x4', 'O', '\v', '\x4', '\x3', '\x5', '\x6', 
		'\x5', 'R', '\n', '\x5', '\r', '\x5', '\xE', '\x5', 'S', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\a', '\x6', '\a', ']', '\n', '\a', '\r', '\a', '\xE', '\a', '^', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x64', '\n', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', 
		'p', '\n', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\a', '\n', '\x7F', '\n', '\n', 
		'\f', '\n', '\xE', '\n', '\x82', '\v', '\n', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', 
		'\x6', '\r', '\x91', '\n', '\r', '\r', '\r', '\xE', '\r', '\x92', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\a', '\xE', '\x98', '\n', '\xE', '\f', 
		'\xE', '\xE', '\xE', '\x9B', '\v', '\xE', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\a', '\xF', '\xA0', '\n', '\xF', '\f', '\xF', '\xE', '\xF', 
		'\xA3', '\v', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x5', '\x10', '\xA9', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x5', '\x10', '\xAE', '\n', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\a', '\x10', '\xB2', '\n', '\x10', '\f', '\x10', '\xE', '\x10', 
		'\xB5', '\v', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\xBD', '\n', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\a', '\x11', '\xC1', '\n', '\x11', '\f', 
		'\x11', '\xE', '\x11', '\xC4', '\v', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\a', '\x13', '\xD4', '\n', '\x13', '\f', 
		'\x13', '\xE', '\x13', '\xD7', '\v', '\x13', '\x3', '\x14', '\x3', '\x14', 
		'\x5', '\x14', '\xDB', '\n', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\xEC', '\n', '\x17', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x2', '\x2', '\x1B', '\x2', '\x4', '\x6', 
		'\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', 
		'\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', 
		'\x2', '\x4', '\x3', '\x2', '\t', '\f', '\x4', '\x2', '\"', '\"', '%', 
		'%', '\x2', '\xF6', '\x2', '\x38', '\x3', '\x2', '\x2', '\x2', '\x4', 
		':', '\x3', '\x2', '\x2', '\x2', '\x6', 'G', '\x3', '\x2', '\x2', '\x2', 
		'\b', 'Q', '\x3', '\x2', '\x2', '\x2', '\n', 'X', '\x3', '\x2', '\x2', 
		'\x2', '\f', '\\', '\x3', '\x2', '\x2', '\x2', '\xE', 'h', '\x3', '\x2', 
		'\x2', '\x2', '\x10', 's', '\x3', '\x2', '\x2', '\x2', '\x12', '{', '\x3', 
		'\x2', '\x2', '\x2', '\x14', '\x83', '\x3', '\x2', '\x2', '\x2', '\x16', 
		'\x87', '\x3', '\x2', '\x2', '\x2', '\x18', '\x90', '\x3', '\x2', '\x2', 
		'\x2', '\x1A', '\x94', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x9C', '\x3', 
		'\x2', '\x2', '\x2', '\x1E', '\xA4', '\x3', '\x2', '\x2', '\x2', ' ', 
		'\xB6', '\x3', '\x2', '\x2', '\x2', '\"', '\xC7', '\x3', '\x2', '\x2', 
		'\x2', '$', '\xD0', '\x3', '\x2', '\x2', '\x2', '&', '\xD8', '\x3', '\x2', 
		'\x2', '\x2', '(', '\xDE', '\x3', '\x2', '\x2', '\x2', '*', '\xE0', '\x3', 
		'\x2', '\x2', '\x2', ',', '\xEB', '\x3', '\x2', '\x2', '\x2', '.', '\xED', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\xEF', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\xF1', '\x3', '\x2', '\x2', '\x2', '\x34', '\x39', '\x5', '\x4', 
		'\x3', '\x2', '\x35', '\x39', '\x5', '\b', '\x5', '\x2', '\x36', '\x39', 
		'\x5', '\n', '\x6', '\x2', '\x37', '\x39', '\x5', '\f', '\a', '\x2', '\x38', 
		'\x34', '\x3', '\x2', '\x2', '\x2', '\x38', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x38', '\x36', '\x3', '\x2', '\x2', '\x2', '\x38', '\x37', '\x3', 
		'\x2', '\x2', '\x2', '\x39', '\x3', '\x3', '\x2', '\x2', '\x2', ':', ';', 
		'\a', '\x12', '\x2', '\x2', ';', '<', '\x5', '.', '\x18', '\x2', '<', 
		'@', '\x5', '\x30', '\x19', '\x2', '=', '?', '\x5', '\x16', '\f', '\x2', 
		'>', '=', '\x3', '\x2', '\x2', '\x2', '?', '\x42', '\x3', '\x2', '\x2', 
		'\x2', '@', '>', '\x3', '\x2', '\x2', '\x2', '@', '\x41', '\x3', '\x2', 
		'\x2', '\x2', '\x41', '\x45', '\x3', '\x2', '\x2', '\x2', '\x42', '@', 
		'\x3', '\x2', '\x2', '\x2', '\x43', '\x46', '\x5', '\x1E', '\x10', '\x2', 
		'\x44', '\x46', '\x5', '\"', '\x12', '\x2', '\x45', '\x43', '\x3', '\x2', 
		'\x2', '\x2', '\x45', '\x44', '\x3', '\x2', '\x2', '\x2', '\x46', '\x5', 
		'\x3', '\x2', '\x2', '\x2', 'G', 'H', '\a', '\x12', '\x2', '\x2', 'H', 
		'I', '\x5', '.', '\x18', '\x2', 'I', 'M', '\x5', '\x30', '\x19', '\x2', 
		'J', 'L', '\x5', '\x16', '\f', '\x2', 'K', 'J', '\x3', '\x2', '\x2', '\x2', 
		'L', 'O', '\x3', '\x2', '\x2', '\x2', 'M', 'K', '\x3', '\x2', '\x2', '\x2', 
		'M', 'N', '\x3', '\x2', '\x2', '\x2', 'N', '\a', '\x3', '\x2', '\x2', 
		'\x2', 'O', 'M', '\x3', '\x2', '\x2', '\x2', 'P', 'R', '\x5', '\xE', '\b', 
		'\x2', 'Q', 'P', '\x3', '\x2', '\x2', '\x2', 'R', 'S', '\x3', '\x2', '\x2', 
		'\x2', 'S', 'Q', '\x3', '\x2', '\x2', '\x2', 'S', 'T', '\x3', '\x2', '\x2', 
		'\x2', 'T', 'U', '\x3', '\x2', '\x2', '\x2', 'U', 'V', '\a', '\x16', '\x2', 
		'\x2', 'V', 'W', '\x5', '\x1C', '\xF', '\x2', 'W', '\t', '\x3', '\x2', 
		'\x2', '\x2', 'X', 'Y', '\a', '\x17', '\x2', '\x2', 'Y', 'Z', '\x5', '\x6', 
		'\x4', '\x2', 'Z', '\v', '\x3', '\x2', '\x2', '\x2', '[', ']', '\x5', 
		'\x10', '\t', '\x2', '\\', '[', '\x3', '\x2', '\x2', '\x2', ']', '^', 
		'\x3', '\x2', '\x2', '\x2', '^', '\\', '\x3', '\x2', '\x2', '\x2', '^', 
		'_', '\x3', '\x2', '\x2', '\x2', '_', '`', '\x3', '\x2', '\x2', '\x2', 
		'`', '\x61', '\a', '\x18', '\x2', '\x2', '\x61', '\x63', '\x5', '\x30', 
		'\x19', '\x2', '\x62', '\x64', '\x5', '\x18', '\r', '\x2', '\x63', '\x62', 
		'\x3', '\x2', '\x2', '\x2', '\x63', '\x64', '\x3', '\x2', '\x2', '\x2', 
		'\x64', '\x65', '\x3', '\x2', '\x2', '\x2', '\x65', '\x66', '\a', '\xF', 
		'\x2', '\x2', '\x66', 'g', '\x5', ',', '\x17', '\x2', 'g', '\r', '\x3', 
		'\x2', '\x2', '\x2', 'h', 'i', '\a', '\x15', '\x2', '\x2', 'i', 'j', '\x5', 
		'.', '\x18', '\x2', 'j', 'k', '\a', '\x1A', '\x2', '\x2', 'k', 'l', '\x5', 
		'\x30', '\x19', '\x2', 'l', 'o', '\a', '\x3', '\x2', '\x2', 'm', 'p', 
		'\x5', '\x12', '\n', '\x2', 'n', 'p', '\x5', '\x4', '\x3', '\x2', 'o', 
		'm', '\x3', '\x2', '\x2', '\x2', 'o', 'n', '\x3', '\x2', '\x2', '\x2', 
		'p', 'q', '\x3', '\x2', '\x2', '\x2', 'q', 'r', '\a', '\x4', '\x2', '\x2', 
		'r', '\xF', '\x3', '\x2', '\x2', '\x2', 's', 't', '\a', '\x15', '\x2', 
		'\x2', 't', 'u', '\x5', '.', '\x18', '\x2', 'u', 'v', '\a', '\x1A', '\x2', 
		'\x2', 'v', 'w', '\x5', '\x30', '\x19', '\x2', 'w', 'x', '\a', '\x3', 
		'\x2', '\x2', 'x', 'y', '\x5', '\x4', '\x3', '\x2', 'y', 'z', '\a', '\x4', 
		'\x2', '\x2', 'z', '\x11', '\x3', '\x2', '\x2', '\x2', '{', '\x80', '\x5', 
		'\x14', '\v', '\x2', '|', '}', '\a', '\x5', '\x2', '\x2', '}', '\x7F', 
		'\x5', '\x14', '\v', '\x2', '~', '|', '\x3', '\x2', '\x2', '\x2', '\x7F', 
		'\x82', '\x3', '\x2', '\x2', '\x2', '\x80', '~', '\x3', '\x2', '\x2', 
		'\x2', '\x80', '\x81', '\x3', '\x2', '\x2', '\x2', '\x81', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\x82', '\x80', '\x3', '\x2', '\x2', '\x2', '\x83', 
		'\x84', '\x5', '*', '\x16', '\x2', '\x84', '\x85', '\a', '\xE', '\x2', 
		'\x2', '\x85', '\x86', '\x5', ',', '\x17', '\x2', '\x86', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\x87', '\x88', '\a', '\x19', '\x2', '\x2', '\x88', 
		'\x89', '\a', '\x13', '\x2', '\x2', '\x89', '\x8A', '\x5', '\x30', '\x19', 
		'\x2', '\x8A', '\x8B', '\x5', '\x18', '\r', '\x2', '\x8B', '\x8C', '\a', 
		'\x10', '\x2', '\x2', '\x8C', '\x8D', '\x5', ',', '\x17', '\x2', '\x8D', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x8F', '\a', '\x6', '\x2', 
		'\x2', '\x8F', '\x91', '\x5', '*', '\x16', '\x2', '\x90', '\x8E', '\x3', 
		'\x2', '\x2', '\x2', '\x91', '\x92', '\x3', '\x2', '\x2', '\x2', '\x92', 
		'\x90', '\x3', '\x2', '\x2', '\x2', '\x92', '\x93', '\x3', '\x2', '\x2', 
		'\x2', '\x93', '\x19', '\x3', '\x2', '\x2', '\x2', '\x94', '\x99', '\x5', 
		'*', '\x16', '\x2', '\x95', '\x96', '\a', '\x5', '\x2', '\x2', '\x96', 
		'\x98', '\x5', '*', '\x16', '\x2', '\x97', '\x95', '\x3', '\x2', '\x2', 
		'\x2', '\x98', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x99', '\x97', '\x3', 
		'\x2', '\x2', '\x2', '\x99', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x9A', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x99', '\x3', '\x2', '\x2', 
		'\x2', '\x9C', '\xA1', '\x5', '\x30', '\x19', '\x2', '\x9D', '\x9E', '\a', 
		'\x5', '\x2', '\x2', '\x9E', '\xA0', '\x5', '\x30', '\x19', '\x2', '\x9F', 
		'\x9D', '\x3', '\x2', '\x2', '\x2', '\xA0', '\xA3', '\x3', '\x2', '\x2', 
		'\x2', '\xA1', '\x9F', '\x3', '\x2', '\x2', '\x2', '\xA1', '\xA2', '\x3', 
		'\x2', '\x2', '\x2', '\xA2', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xA3', 
		'\xA1', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA5', '\a', '\x19', '\x2', 
		'\x2', '\xA5', '\xA6', '\a', '\x11', '\x2', '\x2', '\xA6', '\xA8', '\x5', 
		'\x30', '\x19', '\x2', '\xA7', '\xA9', '\x5', '\x18', '\r', '\x2', '\xA8', 
		'\xA7', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xA9', '\x3', '\x2', '\x2', 
		'\x2', '\xA9', '\xAA', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xAD', '\a', 
		'\x3', '\x2', '\x2', '\xAB', '\xAE', '\x5', '\x1A', '\xE', '\x2', '\xAC', 
		'\xAE', '\x5', '\x32', '\x1A', '\x2', '\xAD', '\xAB', '\x3', '\x2', '\x2', 
		'\x2', '\xAD', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xAE', '\x3', 
		'\x2', '\x2', '\x2', '\xAE', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xAF', 
		'\xB3', '\a', '\x4', '\x2', '\x2', '\xB0', '\xB2', '\x5', ' ', '\x11', 
		'\x2', '\xB1', '\xB0', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xB5', '\x3', 
		'\x2', '\x2', '\x2', '\xB3', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xB3', 
		'\xB4', '\x3', '\x2', '\x2', '\x2', '\xB4', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '\xB5', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB7', '\a', 
		'\x14', '\x2', '\x2', '\xB7', '\xB8', '\a', '\x3', '\x2', '\x2', '\xB8', 
		'\xB9', '\x5', '*', '\x16', '\x2', '\xB9', '\xBC', '\a', '\x3', '\x2', 
		'\x2', '\xBA', '\xBD', '\x5', '\x1A', '\xE', '\x2', '\xBB', '\xBD', '\x5', 
		'\x32', '\x1A', '\x2', '\xBC', '\xBA', '\x3', '\x2', '\x2', '\x2', '\xBC', 
		'\xBB', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xBD', '\x3', '\x2', '\x2', 
		'\x2', '\xBD', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xC2', '\a', 
		'\x4', '\x2', '\x2', '\xBF', '\xC1', '\x5', ' ', '\x11', '\x2', '\xC0', 
		'\xBF', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xC4', '\x3', '\x2', '\x2', 
		'\x2', '\xC2', '\xC0', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xC3', '\x3', 
		'\x2', '\x2', '\x2', '\xC3', '\xC5', '\x3', '\x2', '\x2', '\x2', '\xC4', 
		'\xC2', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xC6', '\a', '\x4', '\x2', 
		'\x2', '\xC6', '!', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xC8', '\a', 
		'\x19', '\x2', '\x2', '\xC8', '\xC9', '\x5', '(', '\x15', '\x2', '\xC9', 
		'\xCA', '\a', '\x3', '\x2', '\x2', '\xCA', '\xCB', '\x5', '\x30', '\x19', 
		'\x2', '\xCB', '\xCC', '\a', '\x3', '\x2', '\x2', '\xCC', '\xCD', '\x5', 
		'*', '\x16', '\x2', '\xCD', '\xCE', '\a', '\x4', '\x2', '\x2', '\xCE', 
		'\xCF', '\a', '\x4', '\x2', '\x2', '\xCF', '#', '\x3', '\x2', '\x2', '\x2', 
		'\xD0', '\xD5', '\x5', ',', '\x17', '\x2', '\xD1', '\xD2', '\a', '\x5', 
		'\x2', '\x2', '\xD2', '\xD4', '\x5', ',', '\x17', '\x2', '\xD3', '\xD1', 
		'\x3', '\x2', '\x2', '\x2', '\xD4', '\xD7', '\x3', '\x2', '\x2', '\x2', 
		'\xD5', '\xD3', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xD6', '\x3', '\x2', 
		'\x2', '\x2', '\xD6', '%', '\x3', '\x2', '\x2', '\x2', '\xD7', '\xD5', 
		'\x3', '\x2', '\x2', '\x2', '\xD8', '\xDA', '\a', '\a', '\x2', '\x2', 
		'\xD9', '\xDB', '\x5', '$', '\x13', '\x2', '\xDA', '\xD9', '\x3', '\x2', 
		'\x2', '\x2', '\xDA', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xDC', 
		'\x3', '\x2', '\x2', '\x2', '\xDC', '\xDD', '\a', '\b', '\x2', '\x2', 
		'\xDD', '\'', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xDF', '\t', '\x2', 
		'\x2', '\x2', '\xDF', ')', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xE1', 
		'\a', '\"', '\x2', '\x2', '\xE1', '+', '\x3', '\x2', '\x2', '\x2', '\xE2', 
		'\xE3', '\a', '\x3', '\x2', '\x2', '\xE3', '\xE4', '\x5', '\x4', '\x3', 
		'\x2', '\xE4', '\xE5', '\a', '\x4', '\x2', '\x2', '\xE5', '\xEC', '\x3', 
		'\x2', '\x2', '\x2', '\xE6', '\xEC', '\a', '\"', '\x2', '\x2', '\xE7', 
		'\xEC', '\a', '&', '\x2', '\x2', '\xE8', '\xEC', '\a', '#', '\x2', '\x2', 
		'\xE9', '\xEC', '\a', '%', '\x2', '\x2', '\xEA', '\xEC', '\x5', '&', '\x14', 
		'\x2', '\xEB', '\xE2', '\x3', '\x2', '\x2', '\x2', '\xEB', '\xE6', '\x3', 
		'\x2', '\x2', '\x2', '\xEB', '\xE7', '\x3', '\x2', '\x2', '\x2', '\xEB', 
		'\xE8', '\x3', '\x2', '\x2', '\x2', '\xEB', '\xE9', '\x3', '\x2', '\x2', 
		'\x2', '\xEB', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xEC', '-', '\x3', 
		'\x2', '\x2', '\x2', '\xED', '\xEE', '\a', '\"', '\x2', '\x2', '\xEE', 
		'/', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xF0', '\t', '\x3', '\x2', '\x2', 
		'\xF0', '\x31', '\x3', '\x2', '\x2', '\x2', '\xF1', '\xF2', '\a', '\r', 
		'\x2', '\x2', '\xF2', '\x33', '\x3', '\x2', '\x2', '\x2', '\x16', '\x38', 
		'@', '\x45', 'M', 'S', '^', '\x63', 'o', '\x80', '\x92', '\x99', '\xA1', 
		'\xA8', '\xAD', '\xB3', '\xBC', '\xC2', '\xD5', '\xDA', '\xEB',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
